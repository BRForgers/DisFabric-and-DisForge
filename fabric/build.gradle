plugins {
    id 'io.github.goooler.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

archivesBaseName = 'disfabric'

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
    shadowCommon(project(path: ":events", configuration: "transformProductionFabric")) { transitive false }

    shadowCommon("blue.endless:jankson:1.2.3")
    shadowCommon("net.dv8tion:JDA:5.0.0-beta.15") {
        exclude module: 'opus-java'
        exclude group: 'org.slf4j'
        exclude module: 'annotations'
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")

    relocate 'com.neovisionaries', 'one.armelin.shaded.com.neovisionaries'
    relocate 'com.iwebpp', 'one.armelin.shaded.com.iwebpp'
    relocate 'com.fasterxml', 'one.armelin.shaded.com.fasterxml'
    relocate 'gnu', 'one.armelin.shaded.gnu'
    relocate 'net.dv8tion', 'one.armelin.shaded.net.dv8tion'
    relocate 'org.apache.commons', 'one.armelin.shaded.org.apache.commons'
    relocate 'kotlin', 'one.armelin.shaded.kotlin'
    relocate 'okhttp3', 'one.armelin.shaded.okhttp3'
    relocate 'okio', 'one.armelin.shaded.okio'
    relocate 'blue', 'one.armelin.shaded.blue'
    exclude 'module-info.class'
    exclude 'dummyThing'
    exclude 'mozilla/public-suffix-list.txt'
    exclude { file ->
        if (file.path.contains("META-INF/")) {
            return !(file.path.contains("kotlin"))
        }
        return false
    }
    minimize {
        exclude(project(path: ":events"))
    }
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}